import asyncio
import sqlite3
import requests
from bs4 import BeautifulSoup

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8065536116:AAGx8RetEX2sPeisD3yUpTKFNzEe-gJ6FmI"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîó –°—Å—ã–ª–∫–∏ OLX –¥–ª—è Wroc≈Çaw
URLS = {
    "–æ–±—ã—á–Ω—ã–µ": "https://www.olx.pl/sport-hobby/rowery/wroclaw/?min_id=1020411554&reason=observed_search&search%5Border%5D=created_at%3Adesc",
    "—ç–ª–µ–∫—Ç—Ä–æ": "https://www.olx.pl/sport-hobby/rowery/rowery-elektryczne/wroclaw/?min_id=1019981074&reason=observed_search&search%5Border%5D=created_at%3Adesc"
}

# üî¢ –õ–∏–º–∏—Ç—ã —Ü–µ–Ω—ã
MAX_PRICE = {
    "–æ–±—ã—á–Ω—ã–µ": 250,
    "—ç–ª–µ–∫—Ç—Ä–æ": 1300
}

# üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
conn = sqlite3.connect("ads.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS sent_ads (ad_id TEXT PRIMARY KEY)")
conn.commit()

# ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üö≤ –û–±—ã—á–Ω—ã–µ"), KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ")],
        [KeyboardButton(text="‚ñ∂Ô∏è –ü—É—Å–∫"), KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="‚õî –°—Ç–æ–ø")]
    ],
    resize_keyboard=True
)

# üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscribed = {}


# üì° –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ OLX
async def fetch_ads(category):
    url = URLS[category]
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "html.parser")
    ads = []
    for item in soup.select("div.offer-wrapper"):
        try:
            title = item.select_one("strong").text.strip()
            link = item.select_one("a")["href"]
            price_text = item.select_one(".price").text.strip().replace("z≈Ç", "").replace(" ", "")
            price = int(price_text)
            ad_id = link.split("/")[-1]
            if price <= MAX_PRICE[category]:
                ads.append((ad_id, title, link, price))
        except:
            continue
    return ads


# ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def send_new_ads(user_id, category):
    ads = await fetch_ads(category)
    for ad_id, title, link, price in ads:
        c.execute("SELECT 1 FROM sent_ads WHERE ad_id=?", (ad_id,))
        if not c.fetchone():
            await bot.send_message(user_id, f"{title}\n{price} z≈Ç\n{link}")
            c.execute("INSERT INTO sent_ads (ad_id) VALUES (?)", (ad_id,))
            conn.commit()


# üîÑ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def check_ads():
    while True:
        for user_id, categories in user_subscribed.items():
            for category in categories:
                await send_new_ads(user_id, category)
        await asyncio.sleep(60)  # –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É


# ================== –•–ï–ù–î–õ–ï–†–´ ==================

@dp.message(Command("start"))
async def start_handler(message: Message):
    user_subscribed[message.from_user.id] = []
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üöÄ\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.message(F.text.in_(["üö≤ –û–±—ã—á–Ω—ã–µ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ"]))
async def category_handler(message: Message):
    user_id = message.from_user.id
    category = "–æ–±—ã—á–Ω—ã–µ" if message.text == "üö≤ –û–±—ã—á–Ω—ã–µ" else "—ç–ª–µ–∫—Ç—Ä–æ"

    if user_id not in user_subscribed:
        user_subscribed[user_id] = []
    if category not in user_subscribed[user_id]:
        user_subscribed[user_id].append(category)

    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")


@dp.message(F.text.in_(["‚ñ∂Ô∏è –ü—É—Å–∫", "‚è∏ –ü–∞—É–∑–∞", "‚õî –°—Ç–æ–ø"]))
async def control_handler(message: Message):
    user_id = message.from_user.id
    text = message.text

    if text == "‚ñ∂Ô∏è –ü—É—Å–∫":
        if user_id not in user_subscribed:
            user_subscribed[user_id] = []
        await message.answer("‚ñ∂Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")

    elif text == "‚è∏ –ü–∞—É–∑–∞":
        user_subscribed[user_id] = []
        await message.answer("‚è∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    elif text == "‚õî –°—Ç–æ–ø":
        if user_id in user_subscribed:
            del user_subscribed[user_id]
        await message.answer("‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(check_ads())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())



